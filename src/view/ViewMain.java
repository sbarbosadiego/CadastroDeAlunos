/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.ControllerAluno;
import controller.ControllerCurso;
import controller.ControllerCursoAluno;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelAluno;
import model.ModelCurso;
import model.ModelCursoAluno;

/**
 * @author Diego Barbosa da Silva
 */
public class ViewMain extends javax.swing.JFrame {
    
    // Variáveis aluno
    ModelAluno modelAluno = new ModelAluno();
    ControllerAluno controllerAluno = new ControllerAluno();
    ArrayList<ModelAluno> listaModelAlunos = new ArrayList<>();
    ArrayList<ModelAluno> listaModelPesquisaAlunos = new ArrayList<>();
    DefaultListModel listaCurso;
    
    // Variáveis curso
    ModelCurso modelCurso = new ModelCurso();
    ControllerCurso controllerCurso = new ControllerCurso();
    ArrayList<ModelCurso> listaModelCursos = new ArrayList<>();
    ArrayList<ModelCurso> listaModelPesquisaCursos = new ArrayList<>();
    DefaultListModel listaAluno;
    
    // Variáveis matrícula
    ModelCursoAluno modelCursoAluno = new ModelCursoAluno();
    ControllerCursoAluno controllerCursoAluno = new ControllerCursoAluno();
    ArrayList<ModelCursoAluno> listaModelCursoAluno = new ArrayList<>();
    
    int Enter = 0;
    String editarSalvar;

    /**
     * Creates new form ViewAluno
     */
    public ViewMain() {
        initComponents();
        listarAlunos();
        listarCursos();
        listarCursoAluno();
        habilitarDesabilitarCamposAluno(false);
        habilitarDesabilitarCamposCurso(false);
        habilitarDesabilitarCamposCursoAluno(false);
        listaAluno = new DefaultListModel();
        listaCurso = new DefaultListModel();
        listaPesquisaAluno.setModel(listaAluno);
        listaPesquisaCurso.setModel(listaCurso);
        jObrigatorioAluno.setVisible(false);
        jObrigatorioCurso.setVisible(false);
        listaPesquisaAluno.setVisible(false);
        listaPesquisaCurso.setVisible(false);
        listarPesquisaAluno();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpAluno = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfNomeAluno = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfPesquisaAluno = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtableAluno = new javax.swing.JTable();
        btnPesquisarAluno = new javax.swing.JButton();
        btnSalvarAluno = new javax.swing.JButton();
        btnEditarAluno = new javax.swing.JButton();
        btnExcluirAluno = new javax.swing.JButton();
        btnCancelarAluno = new javax.swing.JButton();
        btnNovoAluno = new javax.swing.JButton();
        jtfCodigoAluno = new javax.swing.JTextField();
        jObrigatorioAluno = new javax.swing.JLabel();
        jpCurso = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jtfNomeCurso = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfPesquisaCurso = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtableCurso = new javax.swing.JTable();
        btnPesquisarCurso = new javax.swing.JButton();
        btnSalvarCurso = new javax.swing.JButton();
        btnEditarCurso = new javax.swing.JButton();
        btnExcluirCurso = new javax.swing.JButton();
        btnCancelarCurso = new javax.swing.JButton();
        btnNovoCurso = new javax.swing.JButton();
        jtfCodigoCurso = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtextEmentaCurso = new javax.swing.JTextArea();
        jObrigatorioCurso = new javax.swing.JLabel();
        jpCursoAluno = new javax.swing.JPanel();
        listaPesquisaAluno = new javax.swing.JList<>();
        listaPesquisaCurso = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        campoPesquisaCurso = new javax.swing.JTextField();
        campoPesquisaAluno = new javax.swing.JTextField();
        btnExcluirCursoAluno = new javax.swing.JButton();
        btnCancelarCursoAluno = new javax.swing.JButton();
        btnNovoCursoAluno = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtableCursoAluno = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jtfPesquisaCursoAluno = new javax.swing.JTextField();
        btnPesquisarCursoAluno = new javax.swing.JButton();
        btnSalvarCursoAluno = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastro de Alunos");
        setLocation(new java.awt.Point(700, 200));
        setResizable(false);

        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel1.setText("Cód. do Aluno");

        jtfNomeAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtfNomeAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfNomeAlunoKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel2.setText("Nome:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel3.setText("Pesquisar:");

        jtfPesquisaAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtfPesquisaAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfPesquisaAlunoKeyPressed(evt);
            }
        });

        jtableAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtableAluno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód.", "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtableAluno.setRowHeight(23);
        jScrollPane1.setViewportView(jtableAluno);
        if (jtableAluno.getColumnModel().getColumnCount() > 0) {
            jtableAluno.getColumnModel().getColumn(0).setMinWidth(80);
            jtableAluno.getColumnModel().getColumn(0).setPreferredWidth(80);
            jtableAluno.getColumnModel().getColumn(0).setMaxWidth(80);
        }

        btnPesquisarAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnPesquisarAluno.setText("Filtrar");
        btnPesquisarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarAlunoActionPerformed(evt);
            }
        });
        btnPesquisarAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnPesquisarAlunoKeyPressed(evt);
            }
        });

        btnSalvarAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSalvarAluno.setForeground(new java.awt.Color(0, 153, 51));
        btnSalvarAluno.setText("Salvar");
        btnSalvarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarAlunoActionPerformed(evt);
            }
        });
        btnSalvarAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSalvarAlunoKeyPressed(evt);
            }
        });

        btnEditarAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnEditarAluno.setForeground(new java.awt.Color(0, 0, 153));
        btnEditarAluno.setText("Editar");
        btnEditarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarAlunoActionPerformed(evt);
            }
        });

        btnExcluirAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnExcluirAluno.setForeground(new java.awt.Color(255, 0, 0));
        btnExcluirAluno.setText("Excluir");
        btnExcluirAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirAlunoActionPerformed(evt);
            }
        });

        btnCancelarAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCancelarAluno.setForeground(new java.awt.Color(255, 0, 0));
        btnCancelarAluno.setText("Cancelar");
        btnCancelarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarAlunoActionPerformed(evt);
            }
        });

        btnNovoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnNovoAluno.setText("Novo");
        btnNovoAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoAlunoActionPerformed(evt);
            }
        });

        jtfCodigoAluno.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jtfCodigoAluno.setEnabled(false);

        jObrigatorioAluno.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jObrigatorioAluno.setForeground(new java.awt.Color(255, 0, 0));
        jObrigatorioAluno.setText("*");
        jObrigatorioAluno.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jpAlunoLayout = new javax.swing.GroupLayout(jpAluno);
        jpAluno.setLayout(jpAlunoLayout);
        jpAlunoLayout.setHorizontalGroup(
            jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAlunoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAlunoLayout.createSequentialGroup()
                        .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jtfCodigoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jpAlunoLayout.createSequentialGroup()
                                .addComponent(jtfNomeAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jObrigatorioAluno)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jpAlunoLayout.createSequentialGroup()
                        .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpAlunoLayout.createSequentialGroup()
                                .addComponent(btnExcluirAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancelarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEditarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSalvarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnNovoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jpAlunoLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfPesquisaAluno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPesquisarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))))
        );
        jpAlunoLayout.setVerticalGroup(
            jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAlunoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfNomeAluno, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addComponent(jObrigatorioAluno))
                    .addComponent(jtfCodigoAluno, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPesquisarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfPesquisaAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addGap(17, 17, 17)
                .addGroup(jpAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluirAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNovoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        jTabbedPane1.addTab("Aluno", jpAluno);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel4.setText("Cód. do Curso:");

        jtfNomeCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtfNomeCurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfNomeCursoKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel5.setText("Curso:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel6.setText("Pesquisar:");

        jtfPesquisaCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtfPesquisaCurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfPesquisaCursoKeyPressed(evt);
            }
        });

        jtableCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtableCurso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód.", "Curso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtableCurso.setRowHeight(23);
        jScrollPane2.setViewportView(jtableCurso);
        if (jtableCurso.getColumnModel().getColumnCount() > 0) {
            jtableCurso.getColumnModel().getColumn(0).setMinWidth(80);
            jtableCurso.getColumnModel().getColumn(0).setPreferredWidth(80);
            jtableCurso.getColumnModel().getColumn(0).setMaxWidth(80);
        }

        btnPesquisarCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnPesquisarCurso.setText("Filtrar");
        btnPesquisarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarCursoActionPerformed(evt);
            }
        });
        btnPesquisarCurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnPesquisarCursoKeyPressed(evt);
            }
        });

        btnSalvarCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSalvarCurso.setForeground(new java.awt.Color(0, 153, 51));
        btnSalvarCurso.setText("Salvar");
        btnSalvarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarCursoActionPerformed(evt);
            }
        });
        btnSalvarCurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSalvarCursoKeyPressed(evt);
            }
        });

        btnEditarCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnEditarCurso.setForeground(new java.awt.Color(0, 0, 153));
        btnEditarCurso.setText("Editar");
        btnEditarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCursoActionPerformed(evt);
            }
        });

        btnExcluirCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnExcluirCurso.setForeground(new java.awt.Color(255, 0, 0));
        btnExcluirCurso.setText("Excluir");
        btnExcluirCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirCursoActionPerformed(evt);
            }
        });

        btnCancelarCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCancelarCurso.setForeground(new java.awt.Color(255, 0, 0));
        btnCancelarCurso.setText("Cancelar");
        btnCancelarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarCursoActionPerformed(evt);
            }
        });

        btnNovoCurso.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnNovoCurso.setText("Novo");
        btnNovoCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoCursoActionPerformed(evt);
            }
        });

        jtfCodigoCurso.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jtfCodigoCurso.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel7.setText("Ementa:");

        jtextEmentaCurso.setColumns(20);
        jtextEmentaCurso.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jtextEmentaCurso.setRows(5);
        jtextEmentaCurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtextEmentaCursoKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jtextEmentaCurso);

        jObrigatorioCurso.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jObrigatorioCurso.setForeground(new java.awt.Color(255, 0, 0));
        jObrigatorioCurso.setText("*");

        javax.swing.GroupLayout jpCursoLayout = new javax.swing.GroupLayout(jpCurso);
        jpCurso.setLayout(jpCursoLayout);
        jpCursoLayout.setHorizontalGroup(
            jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCursoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpCursoLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpCursoLayout.createSequentialGroup()
                        .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpCursoLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfPesquisaCurso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPesquisarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpCursoLayout.createSequentialGroup()
                                .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpCursoLayout.createSequentialGroup()
                                        .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jtfCodigoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addGroup(jpCursoLayout.createSequentialGroup()
                                                .addComponent(jtfNomeCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jObrigatorioCurso))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpCursoLayout.createSequentialGroup()
                                        .addComponent(btnExcluirCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCancelarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEditarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSalvarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnNovoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))))
        );
        jpCursoLayout.setVerticalGroup(
            jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCursoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfNomeCurso, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addComponent(jObrigatorioCurso))
                    .addComponent(jtfCodigoCurso, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpCursoLayout.createSequentialGroup()
                        .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfPesquisaCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addGroup(jpCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSalvarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExcluirCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancelarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNovoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnPesquisarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Curso", jpCurso);

        jpCursoAluno.setLayout(null);

        listaPesquisaAluno.setBorder(null);
        listaPesquisaAluno.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listaPesquisaAluno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listaPesquisaAlunoMousePressed(evt);
            }
        });
        jpCursoAluno.add(listaPesquisaAluno);
        listaPesquisaAluno.setBounds(61, 38, 249, 78);

        listaPesquisaCurso.setBorder(null);
        listaPesquisaCurso.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listaPesquisaCurso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listaPesquisaCursoMousePressed(evt);
            }
        });
        jpCursoAluno.add(listaPesquisaCurso);
        listaPesquisaCurso.setBounds(371, 38, 207, 78);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel8.setText("Curso:");
        jpCursoAluno.add(jLabel8);
        jLabel8.setBounds(317, 15, 52, 19);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel9.setText("Aluno:");
        jpCursoAluno.add(jLabel9);
        jLabel9.setBounds(10, 15, 49, 19);

        campoPesquisaCurso.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        campoPesquisaCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPesquisaCursoActionPerformed(evt);
            }
        });
        campoPesquisaCurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoPesquisaCursoKeyReleased(evt);
            }
        });
        jpCursoAluno.add(campoPesquisaCurso);
        campoPesquisaCurso.setBounds(369, 10, 210, 30);

        campoPesquisaAluno.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        campoPesquisaAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPesquisaAlunoActionPerformed(evt);
            }
        });
        campoPesquisaAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoPesquisaAlunoKeyReleased(evt);
            }
        });
        jpCursoAluno.add(campoPesquisaAluno);
        campoPesquisaAluno.setBounds(59, 10, 252, 30);

        btnExcluirCursoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnExcluirCursoAluno.setForeground(new java.awt.Color(255, 0, 0));
        btnExcluirCursoAluno.setText("Excluir");
        btnExcluirCursoAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirCursoAlunoActionPerformed(evt);
            }
        });
        jpCursoAluno.add(btnExcluirCursoAluno);
        btnExcluirCursoAluno.setBounds(10, 425, 100, 30);

        btnCancelarCursoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCancelarCursoAluno.setForeground(new java.awt.Color(255, 0, 0));
        btnCancelarCursoAluno.setText("Cancelar");
        btnCancelarCursoAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarCursoAlunoActionPerformed(evt);
            }
        });
        jpCursoAluno.add(btnCancelarCursoAluno);
        btnCancelarCursoAluno.setBounds(128, 425, 100, 30);

        btnNovoCursoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnNovoCursoAluno.setText("Novo");
        btnNovoCursoAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoCursoAlunoActionPerformed(evt);
            }
        });
        jpCursoAluno.add(btnNovoCursoAluno);
        btnNovoCursoAluno.setBounds(364, 425, 100, 30);

        jtableCursoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtableCursoAluno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Matrícula", "Cód. Aluno", "Aluno", "Curso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jtableCursoAluno);
        if (jtableCursoAluno.getColumnModel().getColumnCount() > 0) {
            jtableCursoAluno.getColumnModel().getColumn(0).setMinWidth(80);
            jtableCursoAluno.getColumnModel().getColumn(0).setPreferredWidth(80);
            jtableCursoAluno.getColumnModel().getColumn(0).setMaxWidth(80);
            jtableCursoAluno.getColumnModel().getColumn(1).setMinWidth(80);
            jtableCursoAluno.getColumnModel().getColumn(1).setPreferredWidth(80);
            jtableCursoAluno.getColumnModel().getColumn(1).setMaxWidth(80);
        }

        jpCursoAluno.add(jScrollPane4);
        jScrollPane4.setBounds(10, 100, 570, 310);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel10.setText("Pesquisar:");
        jpCursoAluno.add(jLabel10);
        jLabel10.setBounds(10, 60, 81, 19);

        jtfPesquisaCursoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtfPesquisaCursoAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfPesquisaCursoAlunoKeyPressed(evt);
            }
        });
        jpCursoAluno.add(jtfPesquisaCursoAluno);
        jtfPesquisaCursoAluno.setBounds(90, 53, 382, 30);

        btnPesquisarCursoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnPesquisarCursoAluno.setText("Filtrar");
        btnPesquisarCursoAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarCursoAlunoActionPerformed(evt);
            }
        });
        btnPesquisarCursoAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnPesquisarCursoAlunoKeyPressed(evt);
            }
        });
        jpCursoAluno.add(btnPesquisarCursoAluno);
        btnPesquisarCursoAluno.setBounds(479, 53, 100, 30);

        btnSalvarCursoAluno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSalvarCursoAluno.setForeground(new java.awt.Color(0, 153, 51));
        btnSalvarCursoAluno.setText("Salvar");
        btnSalvarCursoAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarCursoAlunoActionPerformed(evt);
            }
        });
        jpCursoAluno.add(btnSalvarCursoAluno);
        btnSalvarCursoAluno.setBounds(246, 425, 100, 30);

        jTabbedPane1.addTab("Matrícula", jpCursoAluno);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesquisarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarAlunoActionPerformed
        if (jtfPesquisaAluno.getText().isBlank()) {
            listarAlunos();
        }
        pesquisaAluno();
    }//GEN-LAST:event_btnPesquisarAlunoActionPerformed

    private void btnEditarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarAlunoActionPerformed
        jObrigatorioAluno.setVisible(false);
        editarSalvar = "editar";
        int linha = jtableAluno.getSelectedRow();
        habilitarDesabilitarCamposAluno(true);
        try {
            int codigoAluno = (int) jtableAluno.getValueAt(linha, 0);
            modelAluno = controllerAluno.retornarAlunoController(codigoAluno);
            jtfCodigoAluno.setText(String.valueOf(modelAluno.getCodigoAluno()));
            jtfNomeAluno.setText(modelAluno.getNomeAluno());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Nenhum registro selecionado");
        }
    }//GEN-LAST:event_btnEditarAlunoActionPerformed

    private void btnExcluirAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirAlunoActionPerformed
        // A variável vai receber a linha que está selecionado na tabela
        jObrigatorioAluno.setVisible(false);
        int linha = jtableAluno.getSelectedRow();
        // Nesta é guardado o valor do código do aluno passando o número da linha, e na coluna 0 que é o código do mesmo
        int codigoAluno = (int) jtableAluno.getValueAt(linha, 0);
        if (JOptionPane.showConfirmDialog(this, "Excluir Aluno?", "Excluir",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (controllerAluno.excluirAlunoController(codigoAluno)) {
                JOptionPane.showMessageDialog(this, "Aluno excluído", "ATENÇÃO",
                        JOptionPane.WARNING_MESSAGE);
                listarAlunos();
                limparCamposAluno();
            } else {
                JOptionPane.showMessageDialog(this, "Erro de exclusão", "ERRO",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnExcluirAlunoActionPerformed

    private void btnCancelarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarAlunoActionPerformed
        habilitarDesabilitarCamposAluno(false);
        limparCamposAluno();
        jObrigatorioAluno.setVisible(false);
    }//GEN-LAST:event_btnCancelarAlunoActionPerformed

    private void btnNovoAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoAlunoActionPerformed
        limparCamposAluno();
        habilitarDesabilitarCamposAluno(true);
        editarSalvar = "salvar";
        jtfNomeAluno.requestFocus();
    }//GEN-LAST:event_btnNovoAlunoActionPerformed

    private void btnSalvarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarAlunoActionPerformed
        if (editarSalvar.equals("salvar")) {
            salvarAluno();
        } else if (editarSalvar.equals("editar")) {
            editarAluno();
        }
    }//GEN-LAST:event_btnSalvarAlunoActionPerformed

    private void btnPesquisarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarCursoActionPerformed
        if (jtfPesquisaCurso.getText().isBlank()) {
            listarCursos();
        }
        pesquisaCurso();
    }//GEN-LAST:event_btnPesquisarCursoActionPerformed

    private void btnSalvarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarCursoActionPerformed
        if (editarSalvar.equals("salvar")) {
            salvarCurso();
        } else if (editarSalvar.equals("editar")) {
            editarCurso();
        }
    }//GEN-LAST:event_btnSalvarCursoActionPerformed

    private void btnEditarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCursoActionPerformed
        jObrigatorioAluno.setVisible(false);
        editarSalvar = "editar";
        int linha = jtableCurso.getSelectedRow();
        habilitarDesabilitarCamposCurso(true);
        try {
            int codigoCurso = (int) jtableCurso.getValueAt(linha, 0);
            modelCurso = controllerCurso.retornarCursoController(codigoCurso);
            jtfCodigoCurso.setText(String.valueOf(modelCurso.getCodigoCurso()));
            jtfNomeCurso.setText(modelCurso.getDescricaoCurso());
            jtextEmentaCurso.setText(modelCurso.getEmentaCurso());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Nenhum registro selecionado");
        }
    }//GEN-LAST:event_btnEditarCursoActionPerformed

    private void btnExcluirCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirCursoActionPerformed
        jObrigatorioAluno.setVisible(false);
        int linha = jtableCurso.getSelectedRow();
        int codigoCurso = (int) jtableCurso.getValueAt(linha, 0);
        if (JOptionPane.showConfirmDialog(this, "Excluir Curso?", "Excluir",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (controllerCurso.excluirCursoController(codigoCurso)) {
                JOptionPane.showMessageDialog(this, "Curso excluído", "ATENÇÃO",
                        JOptionPane.WARNING_MESSAGE);
                listarCursos();
                limparCamposAluno();
            } else {
                JOptionPane.showMessageDialog(this, "Erro de exclusão", "ERRO",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnExcluirCursoActionPerformed

    private void btnCancelarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarCursoActionPerformed
        habilitarDesabilitarCamposCurso(false);
        limparCamposCurso();
        jObrigatorioCurso.setVisible(false);
    }//GEN-LAST:event_btnCancelarCursoActionPerformed

    private void btnNovoCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoCursoActionPerformed
        limparCamposAluno();
        habilitarDesabilitarCamposCurso(true);
        editarSalvar = "salvar";
        jtfNomeCurso.requestFocus();
    }//GEN-LAST:event_btnNovoCursoActionPerformed

    private void campoPesquisaCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPesquisaCursoActionPerformed
        listaPesquisaCurso.setVisible(false);
        Enter = 1;
    }//GEN-LAST:event_campoPesquisaCursoActionPerformed

    private void campoPesquisaCursoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPesquisaCursoKeyReleased
        if (Enter == 0 ) {
            listarPesquisaCurso();
        } else {
            Enter = 0;
        }
    }//GEN-LAST:event_campoPesquisaCursoKeyReleased

    private void listaPesquisaAlunoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisaAlunoMousePressed
        recuperarPesquisaAluno();
        listaPesquisaAluno.setVisible(false);
    }//GEN-LAST:event_listaPesquisaAlunoMousePressed

    private void listaPesquisaCursoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisaCursoMousePressed
        recuperarPesquisaCurso();
        listaPesquisaCurso.setVisible(false);
    }//GEN-LAST:event_listaPesquisaCursoMousePressed

    private void btnExcluirCursoAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirCursoAlunoActionPerformed
        int linha = jtableCursoAluno.getSelectedRow();
        int codigoCursoAluno = (int) jtableCursoAluno.getValueAt(linha, 0);
        if (JOptionPane.showConfirmDialog(this, "Excluir matrícula?", "Excluir",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (controllerCursoAluno.excluirCursoAlunoController(codigoCursoAluno)) {
                JOptionPane.showMessageDialog(this, "Matrícula excluida", "ATENÇÃO",
                        JOptionPane.WARNING_MESSAGE);
                listarCursoAluno();
                limparCamposCursoAluno();
            } else {
                JOptionPane.showMessageDialog(this, "Erro de exclusão", "ERRO",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnExcluirCursoAlunoActionPerformed

    private void btnCancelarCursoAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarCursoAlunoActionPerformed
        limparCamposCursoAluno();
        habilitarDesabilitarCamposCursoAluno(false);
    }//GEN-LAST:event_btnCancelarCursoAlunoActionPerformed

    private void btnNovoCursoAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoCursoAlunoActionPerformed
        habilitarDesabilitarCamposCursoAluno(true);
    }//GEN-LAST:event_btnNovoCursoAlunoActionPerformed

    private void btnPesquisarCursoAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarCursoAlunoActionPerformed
        if (jtfPesquisaCursoAluno.getText().isBlank()) {
            listarCursoAluno();
        }
        
        DefaultTableModel modelo = (DefaultTableModel) jtableCursoAluno.getModel();
        final TableRowSorter<TableModel> classifica = new TableRowSorter<>(modelo);
        jtableCursoAluno.setRowSorter(classifica);
        String pesquisa = jtfPesquisaCursoAluno.getText();
        boolean resultadoPesquisa = testaString(pesquisa);
        if (resultadoPesquisa == true) {
            classifica.setRowFilter(RowFilter.regexFilter(pesquisa, 0));
            if (jtableCursoAluno.getRowCount() == 0) {
                classifica.setRowFilter(RowFilter.regexFilter(pesquisa, 1));
            }
        } else if (resultadoPesquisa == false) {
            classifica.setRowFilter(RowFilter.regexFilter(pesquisa.toUpperCase(), 2));
            if (jtableCursoAluno.getRowCount() == 0) {
                classifica.setRowFilter(RowFilter.regexFilter(pesquisa.toUpperCase(), 3));
            }
        } 
    }//GEN-LAST:event_btnPesquisarCursoAlunoActionPerformed

    private void jtfPesquisaAlunoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaAlunoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnPesquisarAluno.requestFocus();
        }
    }//GEN-LAST:event_jtfPesquisaAlunoKeyPressed

    private void btnPesquisarAlunoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnPesquisarAlunoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            pesquisaAluno();
        }
    }//GEN-LAST:event_btnPesquisarAlunoKeyPressed

    private void jtfPesquisaCursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaCursoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnPesquisarCurso.requestFocus();
        }
    }//GEN-LAST:event_jtfPesquisaCursoKeyPressed

    private void btnPesquisarCursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnPesquisarCursoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            pesquisaCurso();
        }
    }//GEN-LAST:event_btnPesquisarCursoKeyPressed

    private void jtfPesquisaCursoAlunoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaCursoAlunoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnPesquisarCursoAluno.requestFocus();
        }
    }//GEN-LAST:event_jtfPesquisaCursoAlunoKeyPressed

    private void btnPesquisarCursoAlunoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnPesquisarCursoAlunoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            DefaultTableModel modelo = (DefaultTableModel) jtableCursoAluno.getModel();
            final TableRowSorter<TableModel> classifica = new TableRowSorter<>(modelo);
            jtableCursoAluno.setRowSorter(classifica);
            String pesquisa = jtfPesquisaCursoAluno.getText();
            if (testaString(pesquisa) == true) {
                classifica.setRowFilter(RowFilter.regexFilter(pesquisa, 0));
                if (jtableCursoAluno.getRowCount() == 0) {
                    classifica.setRowFilter(RowFilter.regexFilter(pesquisa, 1));
                }
            } else if (testaString(pesquisa) == false) {
                classifica.setRowFilter(RowFilter.regexFilter(pesquisa.toUpperCase(), 2));
                if (jtableCursoAluno.getRowCount() == 0) {
                    classifica.setRowFilter(RowFilter.regexFilter(pesquisa, 3));
                }
            }
        }
    }//GEN-LAST:event_btnPesquisarCursoAlunoKeyPressed

    private void jtfNomeAlunoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNomeAlunoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSalvarAluno.requestFocus();
        }
    }//GEN-LAST:event_jtfNomeAlunoKeyPressed

    private void btnSalvarAlunoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSalvarAlunoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (editarSalvar.equals("salvar")) {
                salvarAluno();
            } else if (editarSalvar.equals("editar")) {
                editarAluno();
            }
        }
    }//GEN-LAST:event_btnSalvarAlunoKeyPressed

    private void jtfNomeCursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNomeCursoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jtextEmentaCurso.requestFocus();
        }
    }//GEN-LAST:event_jtfNomeCursoKeyPressed

    private void btnSalvarCursoAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarCursoAlunoActionPerformed
        salvarCursoAluno();
    }//GEN-LAST:event_btnSalvarCursoAlunoActionPerformed

    private void campoPesquisaAlunoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPesquisaAlunoKeyReleased
        if (Enter == 0 ) {
            listarPesquisaAluno();
        } else {
            Enter = 0;
        }
    }//GEN-LAST:event_campoPesquisaAlunoKeyReleased

    private void campoPesquisaAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPesquisaAlunoActionPerformed
        listaPesquisaAluno.setVisible(false);
        Enter = 1;
    }//GEN-LAST:event_campoPesquisaAlunoActionPerformed

    private void btnSalvarCursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSalvarCursoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (editarSalvar.equals("salvar")) {
                salvarCurso();
            } else if (editarSalvar.equals("editar")) {
                editarCurso();
            }
        }
    }//GEN-LAST:event_btnSalvarCursoKeyPressed

    private void jtextEmentaCursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtextEmentaCursoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnSalvarCurso.requestFocus();
        }
    }//GEN-LAST:event_jtextEmentaCursoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewMain().setVisible(true);
            }
        });
    }

    /**
     * Lista os alunos cadastrados no banco de dados.
     */
    private void listarAlunos() {
        listaModelAlunos = controllerAluno.retornarListarAlunosController();
        DefaultTableModel tabela = (DefaultTableModel) jtableAluno.getModel();
        tabela.setNumRows(0);

        int contador = listaModelAlunos.size();
        for (int c = 0; c < contador; c++) {
            tabela.addRow(new Object[]{
                listaModelAlunos.get(c).getCodigoAluno(),
                listaModelAlunos.get(c).getNomeAluno()
            });
        }
    }
    
    /**
     * Lista os cursos cadastrados no banco de dados.
     */
    private void listarCursos() {
        listaModelCursos = controllerCurso.retornarListarCursosController();
        DefaultTableModel tabela = (DefaultTableModel) jtableCurso.getModel();
        tabela.setNumRows(0);

        int contador = listaModelCursos.size();
        for (int c = 0; c < contador; c++) {
            tabela.addRow(new Object[]{
                listaModelCursos.get(c).getCodigoCurso(),
                listaModelCursos.get(c).getDescricaoCurso()
            });
        }
    }
    
    /**
     * Lista alunos vinculados a cursos no banco de dados.
     */
    private void listarCursoAluno() {
        listaModelCursoAluno = controllerCursoAluno.retornarListarCursoAlunosController();
        DefaultTableModel tabela = (DefaultTableModel) jtableCursoAluno.getModel();
        tabela.setNumRows(0);

        int contador = listaModelCursoAluno.size();
        for (int c = 0; c < contador; c++) {
            tabela.addRow(new Object[]{
                listaModelCursoAluno.get(c).getCodigoCursoAluno(),
                listaModelCursoAluno.get(c).getCodigoAluno(),
                listaModelCursoAluno.get(c).getAluno(),
                listaModelCursoAluno.get(c).getCurso()
            });
        }
    }

    /**
     * Salva o cadastro de dados de um novo aluno no banco de dados.
     */
    private void salvarAluno() {
        if (jtfNomeAluno.getText().isEmpty()) {
            jObrigatorioAluno.setVisible(true);
            JOptionPane.showMessageDialog(null, "Campo vazio!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else if (jtfNomeAluno.getText().length() >= 50) {
            jObrigatorioAluno.setVisible(true);
            JOptionPane.showMessageDialog(null, "Campo nome excede o limite de 50 caracteres!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            modelAluno.setNomeAluno(jtfNomeAluno.getText().toUpperCase());
            if (controllerAluno.salvarAlunoController(modelAluno) > 0) {
                JOptionPane.showMessageDialog(null, "Aluno cadastrado com sucesso", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
                listarAlunos();
                habilitarDesabilitarCamposAluno(false);
                limparCamposAluno();
                jObrigatorioAluno.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(null, "Aluno não cadastrado", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }
    
    /**
     * Salva o cadastro de dados de um novo curso no banco de dados.
     */
    private void salvarCurso() {
        if (jtfNomeCurso.getText().isEmpty()) {
            jObrigatorioCurso.setVisible(true);
            JOptionPane.showMessageDialog(null, "Campo vazio!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else if (jtfNomeCurso.getText().length() >= 51) {
            jObrigatorioAluno.setVisible(true);
            JOptionPane.showMessageDialog(null, "Campo curso excede o limite de 50 caracteres!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            modelCurso.setDescricaoCurso(jtfNomeCurso.getText().toUpperCase());
            modelCurso.setEmentaCurso(jtextEmentaCurso.getText());
            if (controllerCurso.salvarCursoController(modelCurso) > 0) {
                JOptionPane.showMessageDialog(null, "Curso cadastrado com sucesso", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
                listarCursos();
                habilitarDesabilitarCamposCurso(false);
                limparCamposCurso();
                jObrigatorioCurso.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(null, "Curso não cadastrado", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    /**
     * Salva o cadastro de um aluno a um curso no banco de dados.
     */
    private void salvarCursoAluno() {
        if (campoPesquisaAluno.getText().isEmpty() || campoPesquisaCurso.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campo vazio!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else if (campoPesquisaAluno.getText().length() >= 51 || campoPesquisaCurso.getText().length() >= 51) {
            jObrigatorioAluno.setVisible(true);
            JOptionPane.showMessageDialog(null, "Excede o limite de 50 caracteres!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            String nome = campoPesquisaAluno.getText();
            String curso = campoPesquisaCurso.getText();
            modelAluno.setCodigoAluno(controllerAluno.retornarAlunoNomeController(nome).getCodigoAluno());
            modelCurso.setCodigoCurso(controllerCurso.retornarCursoNomeController(curso).getCodigoCurso());
            if (controllerCursoAluno.salvarCursoAlunoController(modelAluno, modelCurso) > 0) {
                JOptionPane.showMessageDialog(null, "Matrícula realizada com sucesso", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
                listarCursoAluno();
                limparCamposCursoAluno();
            } else {
                JOptionPane.showMessageDialog(null, "Aluno não vinculado ao curso", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    /**
     * Edita os dados de um aluno já existente no banco de dados.
     */
    private void editarAluno() {
        if (jtfNomeAluno.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campo vazio!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
            jObrigatorioAluno.setVisible(true);
        } else if (jtfNomeAluno.getText().length() >= 51) {
            JOptionPane.showMessageDialog(null, "Excede o limite de 50 caracteres!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
            jObrigatorioAluno.setVisible(true);
        } else {
            modelAluno.setNomeAluno(jtfNomeAluno.getText().toUpperCase());
            if (controllerAluno.editarAlunoController(modelAluno)) {
                JOptionPane.showMessageDialog(this, "Editado com sucesso!!", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
                habilitarDesabilitarCamposAluno(false);
                jObrigatorioAluno.setVisible(false);
                listarAlunos();
                limparCamposAluno();
            } else {
                JOptionPane.showMessageDialog(this, "Não foi aplicado a edição, verifique as informações", "ERRO",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }
    
    /**
     * Edita os dados de um curso já existente no banco de dados.
     */
    private void editarCurso() {
        if (jtfNomeCurso.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Campo vazio!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
            jObrigatorioCurso.setVisible(true);
        } else if (jtfNomeCurso.getText().length() >= 51) {
            JOptionPane.showMessageDialog(null, "Excede o limite de 50 caracteres!", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
            jObrigatorioCurso.setVisible(true);
        } else {
            modelCurso.setDescricaoCurso(jtfNomeCurso.getText().toUpperCase());
            modelCurso.setEmentaCurso(jtextEmentaCurso.getText());
            if (controllerCurso.editarCursoController(modelCurso)) {
                JOptionPane.showMessageDialog(this, "Editado com sucesso!!", "ATENÇÃO",
                        JOptionPane.INFORMATION_MESSAGE);
                habilitarDesabilitarCamposCurso(false);
                jObrigatorioAluno.setVisible(false);
                listarCursos();
                limparCamposCurso();
            } else {
                JOptionPane.showMessageDialog(this, "Não foi aplicado a edição, verifique as informações", "ERRO",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Método para limpar os campos da tela aluno.
     */
    private void limparCamposAluno() {
        jtfCodigoAluno.setText("");
        jtfNomeAluno.setText("");
    }
    
    /**
     * Método para limpar os campos da tela curso.
     */
    private void limparCamposCurso() {
        jtfCodigoCurso.setText("");
        jtfNomeCurso.setText("");
        jtextEmentaCurso.setText("");
    }
    
    /**
     * Método para limpar os campos da tela matrícula.
     */
    private void limparCamposCursoAluno() {
        campoPesquisaAluno.setText("");
        campoPesquisaCurso.setText("");
    }

    /**
     * Habilitar e desabilitar campos de texto da tela aluno.
     * @param condicao
     */
    private void habilitarDesabilitarCamposAluno(boolean condicao) {
        jtfNomeAluno.setEnabled(condicao);
    }
    
    /**
     * Habilitar e desabilitar campos de texto da tela curso.
     * @param condicao
     */
    private void habilitarDesabilitarCamposCurso(boolean condicao) {
        jtfNomeCurso.setEnabled(condicao);
        jtextEmentaCurso.setEnabled(condicao);
    }
    
    /**
     * Habilitar e desabilitar campos de matrícula.
     * @param condicao
     */
    private void habilitarDesabilitarCamposCursoAluno(boolean condicao) {
        campoPesquisaAluno.setEnabled(condicao);
        campoPesquisaCurso.setEnabled(condicao);
    }
    
    /**
     * Lista os aluno na pesquisa dinâmica na tela de matrícula.
     */
    private void listarPesquisaAluno() {
        String nomeAluno = campoPesquisaAluno.getText();
        listaModelPesquisaAlunos = controllerAluno.retornarListarPesquisaAlunosController(nomeAluno);
        listaAluno.removeAllElements();
        for (int c = 0; c < listaModelPesquisaAlunos.size(); c++) {
            listaAluno.addElement(listaModelPesquisaAlunos.get(c).getNomeAluno());
        }
        if (campoPesquisaAluno.getText().isEmpty()) {
            listaPesquisaAluno.setVisible(false);
        } else {
            listaPesquisaAluno.setVisible(true);
        }
    }
    
    /**
     * Lista os cursos na pesquisa dinâmica na tela de matrícula.
     */
    private void listarPesquisaCurso() {
        String nomeCurso = campoPesquisaCurso.getText();
        listaModelPesquisaCursos = controllerCurso.retornarListarPesquisaCursosController(nomeCurso);
        listaCurso.removeAllElements();
        for (int c = 0; c < listaModelPesquisaCursos.size(); c++) {
            listaCurso.addElement(listaModelPesquisaCursos.get(c).getDescricaoCurso());
        }
        if (campoPesquisaCurso.getText().isEmpty()) {
            listaPesquisaCurso.setVisible(false);
        } else {
            listaPesquisaCurso.setVisible(true);
        }
    }
    
    /**
     * Recupera o nome e dados de aluno ao clicar na lista de pesquisa dinâmica.
     */
    private void recuperarPesquisaAluno() {
        int linha = listaPesquisaAluno.getSelectedIndex();
        String nome = listaPesquisaAluno.getSelectedValue();
        campoPesquisaAluno.setText(nome);
        modelAluno = controllerAluno.retornarAlunoNomeController(nome);
    }
    
    /**
     * Recupera o nome e dados de curso ao clicar na lista de pesquisa dinâmica.
     */
    private void recuperarPesquisaCurso() {
        int linha = listaPesquisaCurso.getSelectedIndex();
        String curso = listaPesquisaCurso.getSelectedValue();
        campoPesquisaCurso.setText(curso);
        modelCurso = controllerCurso.retornarCursoNomeController(curso);
    }
    
    public void pesquisaAluno() {
        DefaultTableModel modelo = (DefaultTableModel) jtableAluno.getModel();
        final TableRowSorter<TableModel> classifica = new TableRowSorter<>(modelo);
        jtableAluno.setRowSorter(classifica);
        String pesquisa = jtfPesquisaAluno.getText();
        if (testaString(pesquisa) == true) {
            classifica.setRowFilter(RowFilter.regexFilter(pesquisa, 0));
        } else {
            classifica.setRowFilter(RowFilter.regexFilter(pesquisa.toUpperCase(), 1));
        }
    }
    
    public void pesquisaCurso() {
        DefaultTableModel modelo = (DefaultTableModel) jtableCurso.getModel();
        final TableRowSorter<TableModel> classifica = new TableRowSorter<>(modelo);
        jtableCurso.setRowSorter(classifica);
        String pesquisa = jtfPesquisaCurso.getText();
        if (testaString(pesquisa) == true) {
            classifica.setRowFilter(RowFilter.regexFilter(pesquisa, 0));
        } else {
            classifica.setRowFilter(RowFilter.regexFilter(pesquisa.toUpperCase(), 1));
        }
    }
    
    /**
     * Verifica se uma string possuí números.
     * @param texto
     * @return boolean
     */
    private boolean testaString(String texto) {
        Pattern pattern = Pattern.compile("[0-9]+");
        String pesquisa;
        pesquisa = texto;
        boolean numerico = (pesquisa != null && pattern.matcher(pesquisa).find());
        return numerico;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarAluno;
    private javax.swing.JButton btnCancelarCurso;
    private javax.swing.JButton btnCancelarCursoAluno;
    private javax.swing.JButton btnEditarAluno;
    private javax.swing.JButton btnEditarCurso;
    private javax.swing.JButton btnExcluirAluno;
    private javax.swing.JButton btnExcluirCurso;
    private javax.swing.JButton btnExcluirCursoAluno;
    private javax.swing.JButton btnNovoAluno;
    private javax.swing.JButton btnNovoCurso;
    private javax.swing.JButton btnNovoCursoAluno;
    private javax.swing.JButton btnPesquisarAluno;
    private javax.swing.JButton btnPesquisarCurso;
    private javax.swing.JButton btnPesquisarCursoAluno;
    private javax.swing.JButton btnSalvarAluno;
    private javax.swing.JButton btnSalvarCurso;
    private javax.swing.JButton btnSalvarCursoAluno;
    private javax.swing.JTextField campoPesquisaAluno;
    private javax.swing.JTextField campoPesquisaCurso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jObrigatorioAluno;
    private javax.swing.JLabel jObrigatorioCurso;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jpAluno;
    private javax.swing.JPanel jpCurso;
    private javax.swing.JPanel jpCursoAluno;
    private javax.swing.JTable jtableAluno;
    private javax.swing.JTable jtableCurso;
    private javax.swing.JTable jtableCursoAluno;
    private javax.swing.JTextArea jtextEmentaCurso;
    private javax.swing.JTextField jtfCodigoAluno;
    private javax.swing.JTextField jtfCodigoCurso;
    private javax.swing.JTextField jtfNomeAluno;
    private javax.swing.JTextField jtfNomeCurso;
    private javax.swing.JTextField jtfPesquisaAluno;
    private javax.swing.JTextField jtfPesquisaCurso;
    private javax.swing.JTextField jtfPesquisaCursoAluno;
    private javax.swing.JList<String> listaPesquisaAluno;
    private javax.swing.JList<String> listaPesquisaCurso;
    // End of variables declaration//GEN-END:variables
}
